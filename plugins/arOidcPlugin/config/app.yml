## OIDC Plugin configuration.
all:
  oidc:
    # OIDC provider endpoint settings:
    #   Default for Dex: 'http://dex:5556/dex'
    #   Default for Keycloak direct using https: 'https://keycloak:8443/realms/artefactual'
    # NOTE: Always configure using SSL in production.
    provider_url: 'https://keycloak:8443/realms/artefactual'
    client_id: 'artefactual-atom'
    client_secret: 'example-secret'
    # Localhost port 63001 (127.0.0.1:63001) is used as a placeholder and
    # should be replaced with your AtoM site's public IP and port.
    # NOTE: Always configure using SSL in production.
    redirect_url: 'http://127.0.0.1:63001/index.php/oidc/login'

    # Set to true if OIDC endpoint supports logout.
    # Setting examples for tested OpenID providers:
    # --------
    # Keycloak via Dex:
    #   send_oidc_logout: false
    # Keycloak direct:
    #   send_oidc_logout: true
    send_oidc_logout: true

    # OIDC logout requires a URL to redirect to. Use this setting to
    # specify a page to redirect the user to on logout when
    # 'send_oidc_logout' is 'true'. Localhost port 63001 (127.0.0.1:63001)
    # is used as a placeholder and should be replaced with your AtoM site's
    # public IP and port.
    # NOTE: Always configure using SSL in production.
    logout_redirect_url: 'http://127.0.0.1:63001'

    # Set to true if OIDC endpoint is configured to send refresh tokens.
    enable_refresh_token_use: true

    # OIDC server SSL certificate location for server validation.
    # Accepts a filepath or false (to disable, e.g. for development).
    # Examples
    # --------
    # Relative path to sf_root_dir:    'data/oidc/cert/mycert.pem'
    # Absolute path:                   '/usr/var/certif/xxx.pem'
    # Disable server validation:       false
    server_cert: false

    scopes:
        - 'openid'
        # Use with Dex
        # - 'offline_access'
        - 'profile'
        - 'email'
        # Use with Dex
        # - 'groups'

    # Settings for parsing OIDC groups into AtoM group membership.
    # Set set_groups_from_attributes to true to enable.
    set_groups_from_attributes: true
    user_groups:
        administrator:
            attribute_value: 'atom-admin'
            group_id: 100
        editor:
            attribute_value: 'atom-editor'
            group_id: 101
        contributor:
            attribute_value: 'atom-contributor'
            group_id: 102
        translator:
            attribute_value: 'atom-translator'
            group_id: 103

    # Identify token which contains role claims. Options are 'access-token',
    # 'id-token', 'verified-claims', or 'user-info'.
    # 'set_groups_from_attributes' must be 'true' to enable.
    roles_source: access-token

    # Identify the location of role claims within the token identified in
    # `roles_source` above. This is an array containing the node path to
    # locate the roles array in the OIDC token. By default this is found
    # in Keycloak's access token under 'realm_access'/'roles'.
    roles_path:
        - realm_access
        - roles

    # Identify how IAM users are matched to users in AtoM. Two values are allowed:
    #   user_matching_source: oidc-email
    #   user_matching_source: oidc-username
    # Using oidc-username will work without additional scopes being requested.
    #
    # Using oidc-email requires the 'email' scope to be set above in the
    # 'scopes' setting. 'email' is an optional user setup field in Keycloak but
    # MUST be set if matching to pre-existing AtoM user accounts is going to work.
    user_matching_source: oidc-email
